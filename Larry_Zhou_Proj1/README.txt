The jpg images were relatively straightforward to colorize. While using the blue channel as a reference, we checked the green and red channels against it to find the best alignment.All it took iterating through a pixel displacement of [-15, 15] using a for loop to find the smallest SSD (sum of squared differences) in order to determine a good alignment. 
The TIF images were much more difficult to work with due to the sizes of the r, g, and b matrices. Thus, in order to combat this, I used an image pyramid as suggested. I would continually scale a plate by half until the matrix that represented it had a length less than 200, while keeping track of the amount of times I scaled. I would then find the relatively best displacement by rolling the red and green matrices against the blue one by looking through displacements [-15, 15]. I would then recursively call the function and multiply the relatively best displacement by 2 and search between displacements [x-3, x+3] and [y-3, y+3] in the image that was twice the scale as the previous one, and continually do it until the scale reached the original size. 